{"version":3,"sources":["App.js","index.js"],"names":["colorlist","gameData","total","addPerRev","ringlist","Button","props","element","useState","cost","setcost","style","background","color","onClick","costMultiplier","rps","rpsIncrement","toFixed","row","Math","round","toExponential","replace","Upgrades","elements","index","length","push","className","Circles","delay","setElements","forEach","Fragment","mathstring","setmathstring","callback","savedCallback","useRef","useEffect","current","id","setInterval","clearInterval","useInterval","tmpelements","percentage","revolutions","floor","tmpmathelements","DrawCircle","sqSize","radius","viewBox","dashArray","PI","dashOffset","position","top","left","marginLeft","marginTop","width","height","cx","cy","r","strokeWidth","transform","strokeDasharray","strokeDashoffset","stroke","App","pow","ascentions","initializeGameData","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.da1a3698.chunk.js","sourcesContent":["import React, { useState, useEffect, useRef } from \"react\";\nimport \"./App.css\";\n\nvar colorlist = [\n  \"#E1000E\",\n  \"#F28B09\",\n  \"#F9EC14\",\n  \"#9AFC13\",\n  \"#21FE6E\",\n  \"#23FBF6\",\n  \"#19A1F1\",\n  \"#200DF3\",\n  \"#9400F3\",\n  \"#EC02CB\",\n  \"#F48BC3\"\n];\nvar gameData = {\n  total: 10,\n  addPerRev: 0,\n  ringlist: []\n};\n\nfunction App() {\n  initializeGameData();\n  return (\n    <div style={{ background: \"black\" }}>\n      <Upgrades />\n      <Circles delay={50} />\n    </div>\n  );\n}\n\nfunction initializeGameData() {\n  for (let index = 0; index < 11; index++) {\n    gameData.ringlist[index] = {\n      rps: 0,\n      row: index + 1,\n      cost: Math.pow(10, index + 1),\n      color: colorlist[index],\n      percentage: 0,\n      revolutions: 0,\n      rpsIncrement: 0.6 / (index + 1),\n      costMultiplier: 1.1,\n      ascentions: 0\n    };\n  }\n}\n\nconst Button = props => {\n  const element = props.element;\n  const [cost, setcost] = useState(element.cost);\n  if (cost < 1000) {\n    return (\n      <button\n        style={{ background: element.color }}\n        onClick={() => {\n          if (element.cost <= gameData.total) {\n            gameData.total -= element.cost;\n            element.cost = element.cost * element.costMultiplier;\n            element.rps = element.rps + element.rpsIncrement;\n            setcost(element.cost.toFixed(2));\n          }\n        }}\n      >\n        {element.row}\n        <br />\n        {element.cost.toFixed(2)}\n      </button>\n    );\n  } else {\n    return (\n      <button\n        style={{ background: element.color }}\n        onClick={() => {\n          if (element.cost <= gameData.total) {\n            gameData.total -= element.cost;\n            element.cost = Math.round(element.cost * element.costMultiplier);\n            element.rps = element.rps + element.rpsIncrement;\n            setcost(element.cost);\n          }\n        }}\n      >\n        {element.row}\n        <br />\n        {element.cost.toExponential(2).replace(\"+\", \"\")}\n      </button>\n    );\n  }\n};\n\nconst Upgrades = props => {\n  const elements = [];\n  for (let index = 0; index < gameData.ringlist.length; index++) {\n    const element = gameData.ringlist[index];\n    elements.push(<Button element={element} />);\n  }\n  /*\n  Object.keys(gameData.ringlist).forEach(ring => {\n    elements.push(\n    <button style={{background: gameData.rings[ring].color}} onClick={() => {\n      gameData.rings[ring].rps = gameData.rings[ring].rps + gameData.rings[ring].rpsIncrement\n      }}>\n      {ring}\n    </button>\n      );\n      \n  });\n  */\n  return <div className=\"test\">{elements}</div>;\n};\n\nconst Circles = ({ delay }) => {\n  const [elements, setElements] = useState([]);\n  const [mathstring, setmathstring] = useState(colorlist => {\n    let elements = [];\n    gameData.ringlist.forEach(element => {\n      if (element.row !== gameData.ringlist.length) {\n        elements.push(\n          <React.Fragment>\n            <span style={{ color: element.color }}>\n              {\"1.00\"}\n            </span>\n            {\" x \"}\n          </React.Fragment>\n        );\n      } else {\n        elements.push(\n          <React.Fragment>\n            <span style={{ color: element.color }}>\n              {\"1.00\"}\n            </span>\n          </React.Fragment>\n        );\n      }\n    });\n    elements.push(\n      <React.Fragment>\n        {\" \"}\n        = 1.00 per revolution\n      </React.Fragment>\n    );\n    return (elements);});\n  useInterval(() => {\n    let tmpelements = [];\n    for (let index = 0; index < gameData.ringlist.length; index++) {\n      const element = gameData.ringlist[index];\n      element.percentage += (element.rps * delay) / 10;\n      if (element.percentage >= 100) {\n        element.revolutions += Math.floor(element.percentage / 100);\n        element.percentage %= 100;\n        gameData.addPerRev = 1;\n        let tmpmathelements = [];\n        gameData.ringlist.forEach(element => {\n          if (element.row !== gameData.ringlist.length) {\n            tmpmathelements.push(\n              <React.Fragment>\n                <span style={{ color: element.color }}>\n                  {(1 + element.revolutions * 0.01).toFixed(2)}\n                </span>\n                {\" x \"}\n              </React.Fragment>\n            );\n          } else {\n            tmpmathelements.push(\n              <React.Fragment>\n                <span style={{ color: element.color }}>\n                  {(1 + element.revolutions * 0.01).toFixed(2)}\n                </span>\n              </React.Fragment>\n            );\n          }\n          gameData.addPerRev *= 1 + element.revolutions * 0.01;\n        });\n        if (gameData.addPerRev > 1000) {\n          tmpmathelements.push(\n            <React.Fragment>\n              {\" \"}\n              = {gameData.addPerRev.toExponential(2).replace(\"+\", \"\")} per\n              revolution\n            </React.Fragment>\n          );\n        } else {\n          tmpmathelements.push(\n            <React.Fragment>\n              {\" \"}\n              = {gameData.addPerRev.toFixed(2)} per revolution\n            </React.Fragment>\n          );\n        }\n        setmathstring(tmpmathelements);\n        gameData.total += gameData.addPerRev;\n      }\n      if (element.rps < 10) {\n        tmpelements.push(\n          <DrawCircle\n            percentage={element.percentage}\n            color={element.color}\n            row={element.row}\n          />\n        );\n      } else {\n        tmpelements.push(\n          <DrawCircle\n            percentage={100}\n            color={element.color}\n            row={element.row}\n          />\n        );\n      }\n    }\n    setElements(tmpelements);\n  }, delay);\n  if (gameData.total > 1000) {\n    return (\n      <div>\n        <h2>{mathstring}</h2>\n        <h1>{gameData.total.toExponential(2).replace(\"+\", \"\")}</h1>\n        <div>{elements}</div>\n      </div>\n    );\n  } else {\n    return (\n      <div>\n        <h2>{mathstring}</h2>\n        <h1>{gameData.total.toFixed(2)}</h1>\n        <div>{elements}</div>\n      </div>\n    );\n  }\n};\n\nconst DrawCircle = props => {\n  const strokeWidthNum = 10;\n  // Size of the enclosing square\n  const sqSize = 20 + props.row * strokeWidthNum * 2.5;\n  // SVG centers the stroke width on the radius, subtract out so circle fits in square\n  const radius = (sqSize - strokeWidthNum) / 2;\n  // Enclose cicle in a circumscribing square\n  const viewBox = `0 0 ${sqSize} ${sqSize}`;\n  // Arc length at 100% coverage is the circle circumference\n  const dashArray = radius * Math.PI * 2;\n  // Scale 100% coverage overlay with the actual percent\n  const dashOffset = dashArray - (dashArray * props.percentage) / 100;\n\n  return (\n    <svg\n      style={{\n        position: \"absolute\",\n        top: \"50%\",\n        left: \"50%\",\n        marginLeft: -sqSize / 2 + \"px\",\n        marginTop: -sqSize / 2 + \"px\"\n      }}\n      width={sqSize}\n      height={sqSize}\n      viewBox={viewBox}\n    >\n      <circle\n        className=\"circle-progress\"\n        cx={sqSize / 2}\n        cy={sqSize / 2}\n        r={radius}\n        strokeWidth={`${strokeWidthNum}px`}\n        // Start progress marker at 12 O'Clock\n        transform={`rotate(-90 ${sqSize / 2} ${sqSize / 2})`}\n        style={{\n          strokeDasharray: dashArray,\n          strokeDashoffset: dashOffset,\n          stroke: props.color\n        }}\n      />\n    </svg>\n  );\n};\n\n// hook for creating interval\nfunction useInterval(callback, delay) {\n  const savedCallback = useRef();\n\n  // Remember the latest function.\n  useEffect(() => {\n    savedCallback.current = callback;\n  }, [callback]);\n\n  // Set up the interval.\n  useEffect(() => {\n    function tick() {\n      savedCallback.current();\n    }\n    if (delay !== null) {\n      let id = setInterval(tick, delay);\n      return () => clearInterval(id);\n    }\n  }, [delay]);\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));"],"sourceRoot":""}